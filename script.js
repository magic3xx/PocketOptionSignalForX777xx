document.addEventListener('DOMContentLoaded', function () {
    const originalSignalCardHTML = document.querySelector('.signal-card').innerHTML;
    let signalTrend = 0;
    const realLength = 75;
    const paddingRight = 20;
    let lastPulseTime = 0;
    let chart;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    function updateTime() {
        const now = new Date();
        document.getElementById('current-time').textContent = now.toLocaleTimeString('ru-RU', { hour12: false });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    function initResponsiveChart() {
        const ctx = document.getElementById('price-chart').getContext('2d');
        let lastValue = 50 + Math.random() * 10;
        
        const labels = Array.from({ length: realLength + paddingRight }, () => '');
        const data = labels.map((_, i) => {
            if (i < realLength) {
                lastValue += Math.random() * 2 - 1;
                return lastValue;
            }
            return null;
        });
        
        return new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    borderColor: '#1c87c2',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: {
                        target: 'origin',
                        above: 'rgba(68, 108, 148, 0.1)',
                        below: 'rgba(68, 108, 148, 0.1)'
                    },
                    pointRadius: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false },
                    customVerticalGrid: { // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞—à –ø–ª–∞–≥–∏–Ω
                        color: 'rgba(200, 200, 200, 0.1)',
                        step: 20, // –ï—â–µ –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 20 –µ–¥–∏–Ω–∏—Ü)
                        offset: 15 // –ë–æ–ª—å—à–µ–µ —Å–º–µ—â–µ–Ω–∏–µ
                    }
                },
                scales: {
                    x: {
                        display: true,
                        grid: {
                            display: false // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Ç–∫—É
                        },
                        ticks: {
                            display: false
                        }
                    },
                    y: {
                        display: true,
                        grid: {
                            display: true,
                            color: 'rgba(200, 200, 200, 0.1)',
                            drawBorder: false
                        },
                        ticks: {
                            display: false
                        }
                    }
                }
            }
        });
    }
    
    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏
    Chart.register({
        id: 'uniformVerticalGrid',
        beforeDraw(chart) {
            // –ö–æ–¥ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ (–∫–∞–∫ –±—ã–ª–æ)
            const ctx = chart.ctx;
            const xAxis = chart.scales.x;
            const chartArea = chart.chartArea;
            
            const gridOptions = {
                color: 'rgba(200, 200, 200, 0.05)',
                lineWidth: 1,
                step: 3,
                offset: 0
            };
            
            ctx.save();
            ctx.strokeStyle = gridOptions.color;
            ctx.lineWidth = gridOptions.lineWidth;
            
            const firstTick = Math.ceil(xAxis.min / gridOptions.step) * gridOptions.step;
            const lastTick = Math.floor(xAxis.max / gridOptions.step) * gridOptions.step;
            
            for (let value = firstTick; value <= lastTick; value += gridOptions.step) {
                const x = xAxis.getPixelForValue(value) + gridOptions.offset;
                
                if (x >= chartArea.left && x <= chartArea.right) {
                    ctx.beginPath();
                    ctx.moveTo(x, chartArea.top);
                    ctx.lineTo(x, chartArea.bottom);
                    ctx.stroke();
                }
            }
            
            ctx.restore();
        }
    });
    Chart.register({
        id: 'customDotAndLine',
        afterDatasetsDraw(chart) {
            const ctx = chart.ctx;
            const meta = chart.getDatasetMeta(0);
            const realLength = 75;
            
            if (!meta.data || meta.data.length < realLength) return;
            
            const point = meta.data[realLength - 1];
            if (!point || typeof point.x !== 'number' || typeof point.y !== 'number') return;
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(chart.chartArea.left, point.y);
            ctx.lineTo(chart.chartArea.right, point.y);
            ctx.strokeStyle = '#1c87c2';
            ctx.lineWidth = 1;
            ctx.stroke();
            ctx.restore();
            
            // –°—Ç–∞—Ç–∏—á–Ω—ã–π —à–∞—Ä–∏–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
            ctx.save();
            ctx.beginPath();
            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);
            ctx.fillStyle = '#1c87c2';
            ctx.fill();
            ctx.restore();
            
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const now = Date.now();
            if (now - lastPulseTime < 1000) {
                const progress = (now - lastPulseTime) / 1000;
                const outerRadius = 15 + progress * 50; // –ë–æ–ª—å—à–∏–π —Ä–∞–¥–∏—É—Å
                const innerRadius = 10 + progress * 30; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å
                
                // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–µ—Ä–µ–¥–∏–Ω–æ–π
                const gradient = ctx.createRadialGradient(
                    point.x, point.y, innerRadius,
                    point.x, point.y, outerRadius
                );
                
                // –ì–æ–ª—É–±—ã–µ –∫—Ä–∞—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                gradient.addColorStop(0, 'rgba(100, 149, 237, 0)');       // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä
                gradient.addColorStop(0.3, 'rgba(100, 149, 237, 0.3)');   // –ù–∞—á–∞–ª–æ —Ü–≤–µ—Ç–∞
                gradient.addColorStop(0.7, 'rgba(100, 149, 237, 0.3)');   // –ü–∏–∫ —Ü–≤–µ—Ç–∞
                gradient.addColorStop(1, 'rgba(100, 149, 237, 0)');       // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞–π
            }
        }
    });
    
    
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    chart = initResponsiveChart();
    setInterval(updateTime, 1000);
    updateTime();
    
    // –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    const expiryButtons = document.querySelectorAll('.expiry-btn');
    expiryButtons.forEach(button => {
        button.addEventListener('click', function () {
            expiryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
    const getSignalBtn = document.getElementById('get-signal-btn');
    const analyzingContainer = document.getElementById('analyzing-container');
    const signalResult = document.getElementById('signal-result');
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const instrElement = document.getElementById('instr');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML
    const originalHtml = instrElement.innerHTML;
    
    getSignalBtn.addEventListener('click', function () {
        this.classList.add('hidden');
        analyzingContainer.classList.remove('hidden');
        signalResult.classList.add('hidden');
        instrElement.style.display = 'none';
        
        setTimeout(() => {
            analyzingContainer.classList.add('hidden');
            generateSignal();
            startExpiryCountdown();
        }, 3000);
    });
    
    function generateSignal() {
    const activeExpiryBtn = document.querySelector('.expiry-btn.active');
    const expiryTime = parseInt(activeExpiryBtn.dataset.time);
    const isUp = Math.random() > 0.5;
    const percent = Math.floor(Math.random() * 20) + 75;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    const now = new Date();
    now.setSeconds(now.getSeconds() + expiryTime);
    const expiryTimeString = now.toLocaleTimeString('ru-RU', { hour12: false });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
    const directionText = isUp ? '–ü–û–í–´–®–ï–ù–ò–ï' : '–ü–û–ù–ò–ñ–ï–ù–ò–ï';
    const directionIcon = isUp ? '‚Üë' : '‚Üì';
    const directionClass = isUp ? 'up' : 'down';

    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
    const signalHTML = `
        <div class="signal-header">
            <span class="robot-icon">ü§ñ</span>
            <span class="signal-title">–°–ò–ì–ù–ê–õ –ü–û–õ–£–ß–ï–ù</span>
        </div>
        <div class="signal-stats">
            <div class="percent-label">–¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞</div>
            <div class="percent-value">${percent}%</div>
            <div class="direction-arrow ${directionClass}">${directionIcon}</div>
        </div>
        <div class="signal-time">
            –í—Ö–æ–¥ –≤ ${isUp ? '–ü–û–í–´–®–ï–ù–ò–ï' : '–ü–û–ù–ò–ñ–ï–ù–ò–ï'} –≤ ${expiryTimeString}
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
    document.querySelector('.signal-card').innerHTML = signalHTML;
    document.getElementById('expiry-time').textContent = `–î–æ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É:`;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const directionBlock = document.getElementById('final-direction');
    directionBlock.className = `final-direction ${directionClass}`;
    document.getElementById('direction-text').textContent = directionText;
    directionBlock.querySelector('i').className = isUp ? 'fas fa-arrow-up' : 'fas fa-arrow-down';

    signalTrend = isUp ? 1 : -1;
    signalResult.classList.remove('hidden');
}

    function startExpiryCountdown() {
    const activeExpiryBtn = document.querySelector('.expiry-btn.active');
    const expiryTime = parseInt(activeExpiryBtn.dataset.time);
    const timeLeftElement = document.getElementById('time-left');
    let remaining = expiryTime;

    // –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
    document.getElementById('expiry-time').textContent = `–î–æ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É:`;
    updateTimeDisplay();

    const countdown = setInterval(() => {
        remaining--;
        updateTimeDisplay();
        
        if (remaining <= 0) {
            clearInterval(countdown);
            
            // –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - –≤—Ä–µ–º—è —Å–∞–º–æ–π —Å–¥–µ–ª–∫–∏
            let dealRemaining = expiryTime;
            document.getElementById('expiry-time').textContent = `–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:`;
            
            const dealCountdown = setInterval(() => {
                dealRemaining--;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                document.getElementById('expiry-time').textContent = `–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:`;
                updateDealTimeDisplay(dealRemaining);
                
                if (dealRemaining <= 0) {
                    clearInterval(dealCountdown);
                    signalTrend = 0;
                    setTimeout(() => {
                        signalResult.classList.add('hidden');
                        getSignalBtn.classList.remove('hidden');
                        instrElement.innerHTML = originalHtml;
                        instrElement.style.display = 'block';
                        document.getElementById('expiry-time').textContent = `—á–µ—Ä–µ–∑ ${expiryTime} —Å–µ–∫`;
                    }, 500);
                }
            }, 1000);
        }
    }, 1000);

    function updateTimeDisplay() {
        const mins = Math.floor(remaining / 60);
        const secs = remaining % 60;
        timeLeftElement.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        document.getElementById('expiry-time').textContent = `–î–æ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É:`;
    }
    
    function updateDealTimeDisplay(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        timeLeftElement.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
}
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    setInterval(() => {
    if (!chart) return;

    const dataset = chart.data.datasets[0];
    const data = dataset.data;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ null)
    let lastRealValue = 50;
    for (let i = realLength - 1; i >= 0; i--) {
        if (data[i] !== null) {
            lastRealValue = data[i];
            break;
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const newValue = lastRealValue + 
        (signalTrend * (Math.random() * 0.2)) + 
        ((Math.random() - 0.5) * 0.2);

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:
    // 1. –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
    data.shift();
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤ –∫–æ–Ω–µ—Ü —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data.splice(realLength - 1, 0, newValue);
    // 3. –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    data.length = realLength + paddingRight;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
    dataset.borderColor = 
        signalTrend === 1 ? '#00b894' :
        signalTrend === -1 ? '#d63031' :
        '#1c87c2';

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
    chart.data.labels.shift();
    chart.data.labels.push('');

    lastPulseTime = Date.now();
    chart.update();
}, 2000);
});